<style lang="less">
@import './style/iconfont.less';
@import './style/common.less';
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import { authLogin } from '@/util/request'
var log = require('@/util/log.js')
wepy.$log = log
export default class extends wepy.app {
  config = {
    pages: [
      'pages/home/index',
      'pages/me/index',
      'pages/index/index'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '',
      navigationBarTextStyle: 'black',
      backgroundColor: '#eeeeee'
    },
    tabBar: {
      borderStyle: 'black',
      color: '#707070',
      selectedColor: '#e30100',
      backgroundColor: '#ffffff',
      list: [
        {
          pagePath: 'pages/home/index',
          text: '首页',
          iconPath: './images/home.png',
          selectedIconPath: './images/home-active.png'
        },
        {
          pagePath: 'pages/me/index',
          text: '我的',
          iconPath: './images/me.png',
          selectedIconPath: './images/me-active.png'
        }
      ]
    },
    permission: {
      'scope.userLocation': {
        desc: '你的位置信息将用于定位店铺位置'
      }
    }
  }

  globalData = {
    count: 0,
    systemInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    // 拦截request请求
    this.intercept('request', {
      // 发出请求时的回调函数
      config(p) {
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p
      },
      // 请求成功后的回调函数
      success(p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        console.log('请求返回：', p.data)
        if (this.globalData.count > 0) return p
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        if (
          p.data.return_code === '70000' ||
          p.data.return_code === '80001' ||
          p.data.return_code === '80002' ||
          p.data.return_code === '80003' ||
          p.data.return_code === '40029'
        ) {
          this.globalData.count++
          wepy.$log.warn(p.data.return_msg)
          authLogin().then(() => {
            /* global getCurrentPages */
            if (p.data.intercept) {
              if (getCurrentPages().length !== 0) {
                let pages = getCurrentPages()
                let curPage = pages[pages.length - 1]
                curPage.onLoad(curPage.data.options || curPage.options || {})
                curPage.onShow()
              }
            } else {
              // intercept==false 不做页面刷新
              if (getCurrentPages().length !== 0) {
                let pages = getCurrentPages()
                let curPage = pages[pages.length - 1]
                curPage.redo()
              }
            }
            this.globalData.count = 0
          })
        } else {
          this.globalData.count = 0
        }
        return p
      },
      // 请求失败后的回调函数
      fail(p) {
        console.log('request fail: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },
      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete(p) {}
    })
  }

  onLaunch() {
    // this.getSystemInfo()
    this.checkNetwork()
    this.checkUpdate()
  }
  getSystemInfo() {
    return new Promise((resolve, reject) => {
      if (this.globalData.systemInfo) resolve(this.globalData.systemInfo)
      else {
        wx.getSystemInfo({
          success: res => {
            const iphoneX = /iphone x/i.test(res.model)
            const iphoneNew = (/iPhone11/i.test(res.model) && res.screenHeight === 812) || (/iPhone12/i.test(res.model))
            const isIPhoneX = iphoneX || iphoneNew
            res.isIPhoneX = isIPhoneX
            const ios = !!(res.system.toLowerCase().search('ios') + 1)
            let rect
            try {
              rect = wx.getMenuButtonBoundingClientRect ? wx.getMenuButtonBoundingClientRect() : null
              if (!rect) {
                throw new Error('getMenuButtonBoundingClientRect error')
              }
            } catch (error) {
              let gap = 4 // 胶囊按钮上下间距 使导航内容居中
              let width = 96 // 胶囊的宽度
              if (res.platform === 'android') {
                gap = 8
                width = 96
              } else if (res.platform === 'devtools') {
                if (ios) {
                  gap = 5.5 // 开发工具中ios手机
                } else {
                  gap = 7.5 // 开发工具中android和其他手机
                }
              } else {
                gap = 4
                width = 88
              }
              if (!res.statusBarHeight) {
                // 开启wifi的情况下修复statusBarHeight值获取不到
                res.statusBarHeight = res.screenHeight - res.windowHeight - 20
              }
              rect = {
                // 获取不到胶囊信息就自定义重置一个
                bottom: res.statusBarHeight + gap + 32,
                height: 32,
                left: res.windowWidth - width - 10,
                right: res.windowWidth - 10,
                top: res.statusBarHeight + gap,
                width: width
              }
            }
            this.globalData.systemInfo = res
            this.globalData.systemInfo.menu = rect
            let gap = rect.top - res.statusBarHeight
            let navbarTop = res.statusBarHeight + 2 * gap + rect.height
            this.globalData.systemInfo.navbarTop = navbarTop
            let t = res.screenTop || navbarTop
            if (isIPhoneX) {
              t = 88
            }
            let navbarTopWithPX = (t || 64) + 4 + 'px'
            this.globalData.systemInfo.navbarTopWithPX = navbarTopWithPX
            console.log('systemInfo', this.globalData.systemInfo)
            resolve(this.globalData.systemInfo)
          }
        })
      }
    })
  }
  checkUpdate() {
    if (wx.canIUse('getUpdateManager')) {
      const updateManager = wx.getUpdateManager()
      updateManager.onCheckForUpdate(function(res) {
        // 请求完新版本信息的回调
        if (res.hasUpdate) {
          updateManager.onUpdateReady(function() {
            // 强制小程序重启并使用新版本
            updateManager.applyUpdate()
          })
          updateManager.onUpdateFailed(function() {
            // 新的版本下载失败
            wx.showModal({
              title: '已经有新版本了~',
              content: '新版本已经上线啦~ 请您删除当前小程序，重新搜索打开~'
            })
          })
        }
      })
    } else {
      // 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示
      wx.showModal({
        title: '提示',
        content:
          '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
      })
    }
  }
  checkNetwork() {
    wx.onNetworkStatusChange(res => {
      if (!res.isConnected) {
        wx.showToast({
          title: '请检查你的网络',
          icon: 'none'
        })
      }
    })
  }
  showToast(title, { type = 'none', duration = 2000, mask = true } = {}) {
    // 页面使用：this.$parent.showToast('hello')
    wepy.showToast({
      title,
      icon: type,
      duration,
      mask
    })
  }
}
</script>
